from functools import partial as partial
from pyext.src.typedefs import DeviceArray as DeviceArray, Dimension as Dimension, KeyArray as KeyArray, Output as Output, PRNGKey as PRNGKey, State as State
from sklearn.metrics import precision_recall_curve as precision_recall_curve, roc_curve as roc_curve
from typing import Any, Callable

class StateLess:
    def stateless_method(state: State, *args, **kwargs) -> Tuple[State, Output]: ...

def cond_norm(key, y, rho, *args, **kwargs): ...
def cond_bern(key, p, shape): ...
def cond_dist(key, dist, params, **kwargs): ...
def gibbsf(key: KeyArray, *args, N: int = ..., thin: int = ..., rho: float = ..., dof: int = ..., **kwargs) -> DeviceArray: ...
def generic_gibbsf(key: PRNGKey, nsamples: int, thin_every: int, nparams: Dimension, init_params: Callable, update_params: Callable, init_args=..., init_kwargs=..., update_args=..., update_kwargs=...) -> DeviceArray: ...
def generic_gibbs(key: PRNGKey, nsamples: int, thin_every: int, nparams: Dimension, init_params: Callable, update_params: Callable, init_args=..., init_kwargs=..., update_args=..., update_kwargs=...) -> DeviceArray: ...
def x_cond_dens(key, m): ...
y_cond_dens = x_cond_dens

def example_generic_init_params(key, state: Any | None = ...): ...
def example_generic_update_params(key, params, state: Any | None = ...): ...
def gibbs(key, N: int = ..., thin: int = ...): ...
