from typedefs import CartesianTable as CartesianTable, Container as Container, FilePath as FilePath, Matrix as Matrix, PPINetwork as PPINetwork, PRNGKey as PRNGKey, Vector as Vector

def load_protein_complex(pcomplex: FilePath) -> CartesianTable: ...
def get_ppi_network_from_cartesian_table(table: CartesianTable) -> PPINetwork: ...
def get_ppi_network_from_complex(protein_complex) -> PPINetwork: ...
def get_synth_apms_data(bait_prey: PPINetwork, prng_key: PRNGKey) -> Matrix: ...
def poisson_sqr(y, theta, phi) -> float: ...
def move_poisson_sqr(key: PRNGKey, theta: Vector, phi: Matrix) -> tuple[Vector, Matrix]: ...
def eta_1(s, i) -> None: ...
def eta_2(s, i) -> None: ...
def base_measure(x, s, i) -> None: ...
def Anode(eta1, eta2, s, i) -> None: ...
def Lambda() -> None: ...
def magPhi() -> None: ...
def A(theta, phi): ...
