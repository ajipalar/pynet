from jax import grad as grad, jit as jit
from typing import Any, List

dpath_lip: str
dpath_TC: str
df_lip: Any

def import_all_data(): ...
def transform_data(x: List) -> List: ...
def train_test_holdout_split(): ...
def t_lip(x) -> None: ...
def t_BioID(x) -> None: ...
def t_apms_g(x) -> None: ...
def t_apms_s(x) -> None: ...
def impute_missing_values_LiP() -> None: ...
def prior(M) -> None: ...
def likelihood(D, M) -> None: ...
def score(D, M): ...
def scoreSA(score, beta: int = ...): ...
def MHSA(M, S, D): ...
def kernal_mh_simple() -> None: ...
def get_degree_dist() -> None: ...
def generate_synthetic_benchmarks() -> None: ...
def ppc() -> None: ...
def ppc_Criteria() -> None: ...
def postPP() -> None: ...
def PostPP_Criteria() -> None: ...
def edge_accuracy(M, T) -> None: ...
def edge_precision(M, T) -> None: ...

means_selector: Any
means: Any
cvs: Any

def triplet(mu, cv): ...
def min_max(x): ...
def synthetic_triplet(means, cvs, npeptides: int = ...): ...

log2data: Any
wt: Any
treat: Any
aov_p_val: Any
adjusted_p_val: Any
log2_fc: Any
treatment: Any
log2_fc_synth: Any
pval_synth: Any
fdr_adj_pval: Any
conformotypic: Any

def plot_figure(x, y) -> None: ...

error_d: Any
npep: Any
ngen: Any

def reshape(x, npep=..., ngen=...): ...
def Rhat(I_k, mu, sigma, ngen): ...
def Ahat(I, r): ...
def stochastic_model(log2_I_wt, log2_I_treat, prior_mu, prior_sigma, n_generated_samples: int = ...): ...

mu: Any
sigma: Any

def fdr(parray, test: bool = ...): ...

x: Any
x2: Any
aov_adjusted_p_val: Any
