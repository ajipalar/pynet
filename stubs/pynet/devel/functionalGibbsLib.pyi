from typing import Any

State = Any
Output = Any
KeyArray = Any
DeviceArray = Any
PyFname: Any
PyFdef: Any
PyFargs: Any
PyObj: Any
PyStmnt: Any
PyBlock: Any
PyExpr: Any
PyCname: Any
PyCdef: Any
PyLit: Any
PyIden: Any
PyOp: Any

class StateLess:
    def stateless_method(state: State, *args, **kwargs) -> Tuple[State, Output]: ...

def cond_norm(key, y, rho, *args, **kwargs): ...
def cond_bern(key, p, shape): ...
def cond_dist(key, dist, params, **kwargs): ...
def gibbsf(key: KeyArray, *args, N: int = ..., thin: int = ..., rho: float = ..., dof: int = ..., **kwargs) -> DeviceArray: ...
def gibbs(key, N: int = ..., thin: int = ...): ...

class PyFunction:
    args: Any
    name: Any
    ret: Any
    ret_t: Any
    offset: Any
    body: Any
    def __init__(self, name: PyFname = ..., args: PyStmnt = ..., ret: str = ..., ret_t: str = ..., body: str = ..., offset: int = ...) -> None: ...
    def define(self) -> PyFdef: ...

def offset_str(off: int, s: str, newline: bool = ...) -> str: ...
def define_inner_body_fun(): ...
def get_paramlist_str(dof: int) -> PyObj: ...
def py_compile_inner_body(f: PyFname, dof: int, offset: int = ..., comma_seperated_values: str = ...) -> PyFdef: ...
def py_compile_outer_body(dof, offset: int = ..., comma_seperated_values: str = ...) -> PyFdef: ...
def py_compile_initialize(init_function_str, dof, offset: int = ..., comma_seperated_values: str = ..., N: int = ...) -> PyBlock: ...
def compile_gibbsf(init_f: PyFname, f_str: PyFname, definitions: PyBlock = ..., offset: int = ..., thin: int = ..., N: int = ..., rho: float = ..., dof: int = ...) -> PyFdef: ...
def make_gibbs_jit(sampler, rho, N, thin, dof): ...
def get_probability_estimates(samples): ...
def ROC_PRC_test(): ...
def multi_plot(fpr, tpr, xlabel: str = ..., ylabel: str = ...) -> None: ...
def f3(k1, x): ...
def mh_f(key, steps): ...
def rel_error(x, s): ...
def error(): ...
def f(x: KeyArray): ...
def inner_body_fun(i: int, val: tuple[KeyArray, float, float]) -> tuple[KeyArray, float, float]: ...
def outer(val): ...
def f1(x, y, *args, **kwargs): ...
def f2(x, *args, **kwargs): ...
def g(x, y, *args, **kwargs): ...
def h(x, y, *args, **kwargs): ...
def local_block(): ...
def producer(*args): ...
def middle(x, y, *args): ...
def consumer(z, *args): ...
