import IMP.pynet
from functools import partial as partial
from hypothesis import settings as settings

deadline_ms: int

class DevPropertyTrivial(IMP.test.TestCase):
    def test_trivial(self, n1, n2) -> None: ...

class DevTrivialAIS(IMP.test.TestCase):
    n1: int
    n8: int
    n64: int
    n512: int
    n4k: int
    n32k: int
    seed1: int
    seed2: int
    def test_model_getter1(self) -> None: ...
    def test_s_rv1(self) -> None: ...
    def test_T1(self) -> None: ...
    def test_log_score1(self) -> None: ...
    def test_model_getter8(self) -> None: ...
    def test_s_rv8(self) -> None: ...
    def test_T8(self) -> None: ...
    def test_log_score8(self) -> None: ...
    def test_model_getter64(self) -> None: ...
    def test_s_rv64(self) -> None: ...
    def test_T64(self) -> None: ...
    def test_log_score64(self) -> None: ...
    def test_model_getter512(self) -> None: ...
    def test_s_rv512(self) -> None: ...
    def test_T512(self) -> None: ...
    def test_log_score512(self) -> None: ...
    def test_model_getter4k(self) -> None: ...
    def test_s_rv4k(self) -> None: ...
    def test_T4k(self) -> None: ...
    def test_log_score4k(self) -> None: ...
    def test_model_getter32k(self) -> None: ...
    def test_s_rv32k(self) -> None: ...
    def test_T32k(self) -> None: ...
    def test_log_score32k(self) -> None: ...
    def test_specialized_model_to_sampling_trivial(self) -> None: ...
    def test_negative_sample_trivial(self) -> None: ...

class DevTrivialBetaDependantAIS(IMP.test.TestCase): ...

class DevTestAIS(IMP.test.TestCase):
    rtol: float
    atol: float
    n_samples8: int
    n_inter8: int
    n_samples64: int
    n_inter64: int
    def test_sample(self) -> None: ...
    def test_nsteps_mh__g(self) -> None: ...
